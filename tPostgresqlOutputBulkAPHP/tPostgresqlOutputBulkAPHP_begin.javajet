<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.Iterator
    java.util.List

        import java.io.BufferedOutputStream
        import java.io.DataOutputStream
        import java.io.IOException
        import java.io.OutputStream
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String filename = ElementParameterParser.getValueWithUIFieldKey(node,"__FILENAME__","FILENAME");
        
        String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(node,"__FIELDSEPARATOR__","FIELDSEPARATOR");
        
        String rowSeparator = ElementParameterParser.getValueWithUIFieldKey(node,"__ROWSEPARATOR__","ROWSEPARATOR");
        
        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");

        String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
                
        String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
        
        String textEnclosure = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
        
        boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        
        boolean isIncludeHeader = ("true").equals(ElementParameterParser.getValue(node,"__INCLUDEHEADER__"));
        
        boolean skipSerial = ("true").equals(ElementParameterParser.getValue(node, "__SKIP_SERIAL__"));
        
        boolean onlyKey = ("true").equals(ElementParameterParser.getValue(node, "__ONLY_KEY__"));
%>
		int nb_line_<%=cid%> = 0;
		
		final Character OUT_DELIM_<%=cid %> = <%=fieldSeparator %>.charAt(0); 
		
		final String OUT_DELIM_ROWSEP_<%=cid %> = <%=rowSeparator %>;
		
		java.io.File file_<%=cid%>=new java.io.File(<%=filename %>);
		final java.io.BufferedWriter out<%=cid %> = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(file_<%=cid%>, <%= isAppend%>),<%= encoding%>));
       	resourceMap.put("out<%=cid %>", out<%=cid %>); 

<%
    	if("BINARYFILE".equals(fileType)){	
%>

	out<%=cid %>.close();//no need this
    java.io.OutputStream out_<%=cid %> = new java.io.FileOutputStream(<%=filename %>);
   java.io.DataOutputStream  buffer_<%=cid%> = new java.io.DataOutputStream(new java.io.BufferedOutputStream(out_<%=cid %>));
    // 11 bytes required header
    buffer_<%=cid%>.writeBytes("PGCOPY\n\377\r\n\0");
    // 32 bit integer indicating no OID
    buffer_<%=cid%>.writeInt(0);
    // 32 bit header extension area length
    buffer_<%=cid%>.writeInt(0);
<%
   } else	if("CSVFILE".equals(fileType)){	
%>
        	char escapeChar_<%=cid %> = <%=escapeChar.length()==0||("").equals(escapeChar)?"'\\\\'" : escapeChar + ".charAt(0)"%>;

       		char textEnclosure_<%=cid %> = <%=textEnclosure.length()==0||("").equals(textEnclosure)?"'\"'" : textEnclosure + ".charAt(0)"%>;

	        int escape_mode_<%=cid %> = 0;  // 0: double quotes; 1: backslash
    	    if(escapeChar_<%=cid %>=='\\'){
        	    escape_mode_<%=cid %> = 1;
	        }else if(escapeChar_<%=cid %> == textEnclosure_<%=cid %>){
    	        escape_mode_<%=cid %> = 0;
        	}else {
            	throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
	        }
<%
		if(isIncludeHeader){
%>
			if(file_<%=cid%>.length()==0){
<%    			List<IMetadataColumn> columns = metadata.getListColumns();
if( skipSerial ){
for (Iterator<IMetadataColumn> iter = columns.listIterator(); iter.hasNext(); ) {
	IMetadataColumn col = iter.next();
	if (col.getType().equalsIgnoreCase("SERIAL") || col.getType().equalsIgnoreCase("BIGSERIAL")) {
		iter.remove();
	}
}
}
if( onlyKey ){
for (Iterator<IMetadataColumn> iter = columns.listIterator(); iter.hasNext(); ) {
	IMetadataColumn col = iter.next();
	if (!col.isKey()) {
		iter.remove();
	}
}
}
    			int sizeColumns = columns.size();
    			for (int i = 0; i < sizeColumns; i++) {
    				IMetadataColumn column = columns.get(i);
	    		%>
    				out<%=cid %>.write("<%=column.getLabel() %>");
    			<%
    				if(i != sizeColumns - 1) {
    					%>out<%=cid %>.write(OUT_DELIM_<%=cid %>.toString());<%
    				}
    			}%>
	    		out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
	    	}
<%
			}
		}
    }
}
%>
