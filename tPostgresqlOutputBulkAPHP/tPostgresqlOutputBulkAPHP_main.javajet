<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
        java.util.Iterator
		org.talend.core.model.process.ElementParameterParser

        import java.io.BufferedOutputStream
        import java.io.DataOutputStream
        import java.io.IOException
        import java.io.OutputStream
        java.util.concurrent.TimeUnit
	"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
boolean skipSerial = ("true").equals(ElementParameterParser.getValue(node, "__SKIP_SERIAL__"));
boolean onlyKey = ("true").equals(ElementParameterParser.getValue(node, "__ONLY_KEY__"));
String date_format = ElementParameterParser.getValue(node, "__DATE_FORMAT__");
List<IMetadataTable> metadatas = node.getMetadataList();
    
    String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
    
    String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    
    String nullString = ElementParameterParser.getValue(node,"__NULLSTRING__");   
    
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			List<IMetadataColumn> columns = metadata.getListColumns();
if( skipSerial ){
for (Iterator<IMetadataColumn> iter = columns.listIterator(); iter.hasNext(); ) {
	IMetadataColumn col = iter.next();
	if (col.getType().equalsIgnoreCase("SERIAL")) {
		iter.remove();
	}
}
}
if( onlyKey ){
for (Iterator<IMetadataColumn> iter = columns.listIterator(); iter.hasNext(); ) {
	IMetadataColumn col = iter.next();
	if (!col.isKey()) {
		iter.remove();
	}
}
}
    			int sizeColumns = columns.size();
    			//for bug TDI-22555

    		if("BINARYFILE".equals(fileType)){//add the number of columns
%>
buffer_<%=cid%>.writeShort((short)<%=sizeColumns%>);
<%
}
%>
               	String[] row_<%=cid%>=new String[]{<%for(int j=0;j<sizeColumns;j++){if(j != 0) {%>, <%}%><%=nullString%><%}%>};
boolean[] bool_<%=cid%> = new boolean[<%=sizeColumns%>];
Boolean bool_dm_secu_<%=cid%> =  new Boolean(false);
<%
    			for (int i = 0; i < sizeColumns; i++) {
    				IMetadataColumn column = columns.get(i);
%>

if("dm_secu".equals(<%="\""+column.getLabel()+"\"" %>)){
	bool_dm_secu_<%=cid%> = true;
}
<%
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
    		if("BINARYFILE".equals(fileType)){
%>
    //foreach column of this line...
             // System.out.println(<%=javaType%>);
            buffer_<%=cid%>.writeInt(4);
            buffer_<%=cid%>.writeInt(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
                        	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }
					}else {
%>   				
				       	if(<%=conn.getName() %>.<%=column.getLabel() %> != null ){
<%                  
                    		if(javaType == JavaTypesManager.STRING ){
    		if("BINARYFILE".equals(fileType)){
%>
            String string_<%=cid%> = <%=conn.getName() %>.<%=column.getLabel() %>;

            final byte[] utf8Bytes_<%=cid%> = string_<%=cid%>.getBytes("UTF-8");
            buffer_<%=cid%>.writeInt(utf8Bytes_<%=cid%>.length);
            buffer_<%=cid%>.write(utf8Bytes_<%=cid%>);
<%
    			}else{//not binary
%>
                            	row_<%=cid%>[<%=i%>] = <%=conn.getName() %>.<%=column.getLabel() %>;
            if(!"dm_secu".equals(<%="\""+column.getLabel()+"\"" %>)){
	           bool_<%=cid%>[<%=i%>] = true;
                    }

<%
                      }
							}else if(javaType == JavaTypesManager.DATE && pattern != null){
               if("BINARYFILE".equals(fileType)){//timestamp are supported but not date for now. Need to check the databasetype and not talend that wrap t
%>
            buffer_<%=cid%>.writeInt(8);

            org.joda.time.DateTime jdtime_<%=cid%> = new org.joda.time.DateTime(<%=conn.getName() %>.<%=column.getLabel() %>);
            long millis_<%=cid%> = jdtime_<%=cid%>.getMillis();

            // adjust time zone offset
            millis_<%=cid%> += jdtime_<%=cid%>.getZone().getOffset(millis_<%=cid%>);

            // pg time 0 is 2000-01-01 00:00:00
            long secs_<%=cid%> = java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(millis_<%=cid%>);
            // java epoc to postgres epoc
            secs_<%=cid%> -= 946684800L;

            // Julian/Greagorian calendar cutoff point
            if (secs_<%=cid%> < -13165977600L) { // October 15, 1582 -> October 4, 1582
              secs_<%=cid%> -= 86400 * 10;
              if (secs_<%=cid%> < -15773356800L) { // 1500-03-01 -> 1500-02-28
                int years_<%=cid%> = (int) ((secs_<%=cid%> + 15773356800L) / -3155823050L);
                years_<%=cid%>++;
                years_<%=cid%> -= years_<%=cid%> / 4;
                secs_<%=cid%> += years_<%=cid%> * 86400;
              }
}

            buffer_<%=cid%>.writeLong(java.util.concurrent.TimeUnit.SECONDS.toMicros(secs_<%=cid%>));
<%
    			}else{//not binary
%>

    	                    	row_<%=cid%>[<%=i%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= date_format %>);
bool_<%=cid%>[<%=i%>] = true;
<%
                      }
        					}else if(javaType == JavaTypesManager.BYTE_ARRAY){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(1);
            if (<%=conn.getName() %>.<%=column.getLabel() %>) {
              buffer_<%=cid%>.writeByte(1);
            } else {
              buffer_<%=cid%>.writeByte(0);
            }
<%
    			}else{//not binary
%>

            	            	row_<%=cid%>[<%=i%>] = java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
<%
                      }
							}else if(javaType == JavaTypesManager.BOOLEAN){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(1);
            if (<%=conn.getName() %>.<%=column.getLabel() %>) {
              buffer_<%=cid%>.writeByte(1);
            } else {
              buffer_<%=cid%>.writeByte(0);
            }
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else if(javaType == JavaTypesManager.INTEGER){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(4);
            buffer_<%=cid%>.writeInt(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else if(javaType == JavaTypesManager.DOUBLE){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(8);
            buffer_<%=cid%>.writeDouble(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else if(javaType == JavaTypesManager.FLOAT){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(4);
            buffer_<%=cid%>.writeFloat(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else if(javaType == JavaTypesManager.LONG){
               if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(8);
            buffer_<%=cid%>.writeLong(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else if(javaType == JavaTypesManager.SHORT){
               if("BINARYFILE".equals(fileType)){
%>
        buffer_<%=cid%>.writeInt(2);
        buffer_<%=cid%>.writeShort(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
    			}else{//not binary
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
                      }

							}else{
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
        					}
%>
  						}else{//value is  null
<%
    		if("BINARYFILE".equals(fileType)){
%>
            buffer_<%=cid%>.writeInt(-1);
<%
    			}
%>
}
<%
					}
				}

    		if("BINARYFILE".equals(fileType)){
%>
    //foreach column of this line...
 //             System.out.println(row_<%=cid %>.length);
<%
    			}else if("TXTFILE".equals(fileType)){
%>
					for (int i_<%=cid %> = 0; i_<%=cid %> < row_<%=cid %>.length; i_<%=cid %>++) {
	               		String temp_<%=cid %> = row_<%=cid %>[i_<%=cid %>];
	               		
	    		        if(i_<%=cid %> != 0) {
    	    	       		out<%=cid %>.write(OUT_DELIM_<%=cid %>.toString());
        	        	}
        	        	if(!<%=nullString %>.equals(temp_<%=cid %>)){
        	        	  temp_<%=cid %> = temp_<%=cid %>.replaceAll("\\\\","\\\\\\\\");
        	        	}
		           		out<%=cid %>.write(temp_<%=cid %>);
    		        }
<%
    			}else if("CSVFILE".equals(fileType)){
%>
					for (int i_<%=cid %> = 0; i_<%=cid %> < row_<%=cid %>.length; i_<%=cid %>++) {
						if(i_<%=cid %> == 0 || (i_<%=cid %> == row_<%=cid %>.length-1 && bool_dm_secu_<%=cid%>)) {
						}else{
							out<%=cid%>.write(OUT_DELIM_<%=cid %>.toString());
}
                		String temp_<%=cid %> = row_<%=cid %>[i_<%=cid %>];
                        if(!<%=nullString%>.equals(temp_<%=cid %>)) {
                            if (escape_mode_<%=cid %> == 0 ) { // double quotes
                                temp_<%=cid %> = temp_<%=cid %>.replace("" + textEnclosure_<%=cid %>, "" + textEnclosure_<%=cid %> + textEnclosure_<%=cid %>);
                            }else{
                                temp_<%=cid %> = temp_<%=cid %>.replace("\\", "\\\\");
                                temp_<%=cid %> = temp_<%=cid %>.replace("" + textEnclosure_<%=cid %>, "\\" + textEnclosure_<%=cid %>);
                            }
if(bool_<%=cid%>[i_<%=cid %>]){
                            out<%=cid%>.append(textEnclosure_<%=cid %>);
}
                        	out<%=cid%>.write(temp_<%=cid %>);
if(bool_<%=cid%>[i_<%=cid %>]){
                        	out<%=cid%>.append(textEnclosure_<%=cid %>);
}
                        }else{
                            out<%=cid%>.write(temp_<%=cid %>);
                        }
                	}
<%
				}

    	if(!"BINARYFILE".equals(fileType)){	
%>

    			out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
<%
}
%>
    			nb_line_<%=cid %>++;
                <%if(isLog4jEnabled){%>
                    log.debug("<%=cid%> - Writing the record " + nb_line_<%=cid%> + ".");
                <%}%>
    <%
    		}
    	}
    }
}
%>
