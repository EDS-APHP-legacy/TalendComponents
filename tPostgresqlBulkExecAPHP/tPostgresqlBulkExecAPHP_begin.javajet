<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.metadata.MappingTypeRetriever    
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
java.io.*
java.util.Iterator
    java.util.List
    java.util.ArrayList    
    java.util.Map
    java.util.HashMap
" 
skeleton="../templates/db_output_bulk.skeleton" 
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String table = ElementParameterParser.getValue(node, "__TABLE__");
String dbSchema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
String selectJoinField = ElementParameterParser.getValue(node,"__SELECT_JOIN_FIELD__");
boolean standardConformingString= ("true").equals(ElementParameterParser.getValue(node,"__STANDARD_CONFORMING_STRING__"));
boolean convertToUppercase = false; // not active this function
boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
boolean skipSerial = "true".equals(ElementParameterParser.getValue(node, "__SKIP_SERIAL__"));
boolean onlyKey = "true".equals(ElementParameterParser.getValue(node, "__ONLY_KEY__"));
%>
int deletedCount_<%=cid%>=0;
String tableName_<%=cid%> = null;
String dbschema_<%=cid%> = null;
<%
if(useExistingConnection) {
	%>
	dbschema_<%=cid%> = (String)globalMap.get("schema_" + "<%=ElementParameterParser.getValue(node,"__CONNECTION__")%>");
	<%
} else {
	%>
	dbschema_<%=cid%> = <%=dbSchema%>;
	<%
}
%>
if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
	tableName_<%=cid%> = <%=table%>;
} else {
	tableName_<%=cid%> = dbschema_<%=cid%> + "\".\"" + <%=table%>;
}
<%
if(("UPDATE").equals(dataAction) || ("SELECT_JOIN").equals(dataAction)|| ("DELETE").equals(dataAction)|| ("DELSERT").equals(dataAction)) {
%>
     String tmpTableName_<%=cid%> = "tmp_<%=cid %>_" + pid + Thread.currentThread().getId(); //tableName not end. will add pid + Thread.currentThread().getId() when create a temp table for update.
<%
}
String file = ElementParameterParser.getValue(node, "__FILENAME__");
String file_out = ElementParameterParser.getValue(node, "__FILENAME_OUT__");
List<IMetadataColumn> columnList = getColumnList(node);

			if(skipSerial){//natus
				for (Iterator<IMetadataColumn> iter = columnList.listIterator(); iter.hasNext(); ) {
					IMetadataColumn col = iter.next();
					if (col.getType().equalsIgnoreCase("SERIAL") || col.getType().equalsIgnoreCase("BIGSERIAL")) {
						iter.remove();
					}
				}
			}  

			if(onlyKey){//natus
				for (Iterator<IMetadataColumn> iter = columnList.listIterator(); iter.hasNext(); ) {
					IMetadataColumn col = iter.next();
					if (!col.isKey()) {
						iter.remove();
					}
				}
			}  
StringBuilder copyColumns = new StringBuilder("");
if(columnList != null && columnList.size() > 0) {
    copyColumns.append(" (");
    int count = 0;
    for(IMetadataColumn column : columnList) {
        copyColumns.append("\\\"" + column.getOriginalDbColumnName() + "\\\"");
        if(count != columnList.size() - 1) {
            copyColumns.append(",");
        }
        count++;
    }
    copyColumns.append(") ");
}
StringBuilder notNullColumns = new StringBuilder(" ");
List<Map<String, String>> notNullCols =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,"__FORCENOTNULL__" );
if(notNullCols != null && notNullCols.size() > 0) {
    notNullColumns.append("FORCE NOT NULL ");
    int notNullCount = 0;
    for(Map<String, String> notNullCol : notNullCols) {
        if(("true").equals(notNullCol.get("FORCENOTNULL"))) {
            notNullColumns.append("\\\"" + notNullCol.get("SCHEMA_COLUMN") + "\\\",");
            notNullCount++;
        }
    }
    if(notNullCount == 0) {
        notNullColumns = new StringBuilder(" ");
    }
}


%>
/*String bulkSQL_<%=cid%> = "COPY \"" + <%if(("UPDATE").equals(dataAction)||("SELECT_JOIN").equals(dataAction)||("DELETE").equals(dataAction)||("DELSERT").equals(dataAction)) {%>tmpTableName_<%=cid%><% } else {%>tableName_<%=cid%> <%}%>//natus*/
/*+ "\"<%=copyColumns.toString()%>FROM STDIN  WITH ";*/

String bulkSQL_<%=cid%> = "COPY \"" + <%if(("UPDATE").equals(dataAction)||("SELECT_JOIN").equals(dataAction)||("DELETE").equals(dataAction)||("DELSERT").equals(dataAction)) {%>tmpTableName_<%=cid%><% } else {%>tableName_<%=cid%> <%}%>//natus
+ "\"<%if(!("INSERT_LAZY").equals(dataAction)){%><%=copyColumns.toString()%><%}%> FROM STDIN  WITH ";
java.io.InputStream input_stream_<%=cid%>= new java.io.FileInputStream(<%=file%>); 
<%
String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
String oids = (("true").equals(ElementParameterParser.getValue(node, "__OIDS__")) ? "OIDS" : "");
if(("BINARYFILE").equals(fileType)) {
    %>
    bulkSQL_<%=cid%> += "BINARY <%=oids%>";
    <%
} else {
    String nullString = ElementParameterParser.getValue(node, "__NULLSTRING__");        
    %>
    Character field_separator_<%=cid %> = (<%=ElementParameterParser.getValue(node, "__FIELDS_TERMINATED_BY__")%>).charAt(0);
    bulkSQL_<%=cid%> += "<%=oids%> " + "DELIMITER AS '" + field_separator_<%=cid %> + "' ";
	<%if(("TXTFILE").equals(fileType) || (("CSVFILE").equals(fileType) && standardConformingString)) {%>
		bulkSQL_<%=cid%> += "NULL AS '" + <%=nullString%> + "' ";
	<%}else{%>
		bulkSQL_<%=cid%> += "NULL AS '" + <%=nullString%>.replaceAll("\\\\","\\\\\\\\") + "' ";
	<%}
    if(("CSVFILE").equals(fileType)) {
        String header = (("true").equals(ElementParameterParser.getValue(node, "__HEADER__")) ? "HEADER" : "");
        String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");        
        String textEnclosure = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");        
        %>
        Character text_enclosure_<%=cid%> = (<%=textEnclosure %>).charAt(0);
        <%if(standardConformingString) {
        	if("\"\\\\\"".equals(textEnclosure)){
        %>
            	bulkSQL_<%=cid%> += "CSV <%=header%> QUOTE AS '" + <%=textEnclosure %>+ "' ";
		<%
	        }else{
		%>
		        bulkSQL_<%=cid%> += "CSV <%=header%> QUOTE AS " + ("'".equals(text_enclosure_<%=cid%>.toString())?"E":"") + "'" +("'".equals(text_enclosure_<%=cid%>)?"\\":"") + text_enclosure_<%=cid%> + "' ";
		<%
			}
			if("\"\\\\\"".equals(escapeChar)){
		%>
				bulkSQL_<%=cid%> += "ESCAPE AS '" + <%=escapeChar %> + "' ";
		<%
			}else{
		%>
	        	bulkSQL_<%=cid%> += "ESCAPE AS " + ("'".equals(<%=escapeChar %>)?"E":"")  + "'" +("'".equals(<%=escapeChar %>)?"\\":"") + <%=escapeChar %> + "' "; 
        <%
			}
        }else {
       		if("\"\\\\\"".equals(textEnclosure)){
        %>

       			bulkSQL_<%=cid%> += "CSV <%=header%> QUOTE AS '" +  <%=textEnclosure %>.replace("\\", "\\\\") + "' ";
		<%
	        }else{
		%>
		        bulkSQL_<%=cid%> += "CSV <%=header%> QUOTE AS '" + ("'".equals(text_enclosure_<%=cid%>.toString())?"\\":"") + text_enclosure_<%=cid%>.toString().replaceAll("\\\\", "\\\\\\\\") + "' ";
		<%
       		}
			if("\"\\\\\"".equals(escapeChar )){
		%>
		        bulkSQL_<%=cid%> += "ESCAPE AS '"+ <%=escapeChar %>.replace("\\", "\\\\") + "' ";
		<%
	        }else{
		%>
		        bulkSQL_<%=cid%> += "ESCAPE AS '"+ ("'".equals(<%=escapeChar %>)?"\\":"") + <%=escapeChar %>.replaceAll("\\\\", "\\\\\\\\") + "' ";
		<%
			}
        }%>        
        bulkSQL_<%=cid%> += "<%=notNullColumns.toString().substring(0, notNullColumns.toString().length() - 1)%>";
        <%
    }
}



String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String dbName = ElementParameterParser.getValue(node, "__DBNAME__");
String userName = ElementParameterParser.getValue(node, "__USER__");

%> 
java.sql.Connection conn_<%=cid%> = null;
	<%
	if(useExistingConnection) {
    		String conn = "conn_" + ElementParameterParser.getValue(node,"__CONNECTION__");
	%>
	 	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
	 <%
	 	log4jCodeGenerateUtil.useExistConnection(node);
	 } else {
	 %>
	 	String driverClass_<%=cid%> = "org.postgresql.Driver";
		java.lang.Class.forName(driverClass_<%=cid%>).newInstance();
		String url_<%=cid%> = "jdbc:postgresql://" + <%=host%> + ":" + <%=port%> + "/" + <%=dbName%>;
		String dbUser_<%=cid%> = <%=userName%>;
		<%
		String passwordFieldName = "__PASS__";
		%>
		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	
		String dbPwd_<%=cid%> = decryptedPassword_<%=cid%>;
	<%
		log4jCodeGenerateUtil.debugConnectionParams(node);
		log4jCodeGenerateUtil.connect(node);
	}
	%>

<%
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
List<Column> stmtStructure = null;
Manager manager = null;
if(columnList != null && columnList.size() > 0) {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
}
if((columnList != null && columnList.size() > 0) || "CLEAR".equals(tableAction) || "TRUNCATE".equals(tableAction)){

%>
	<%@ include file="../templates/_tableActionForBulk.javajet"%>	
<%    
}else{//TDI-29007
     manager = getManager(dbmsId, cid);
     manager.setNode(node);
}

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
if(("UPDATE").equals(dataAction)) {

    if(columnList != null && columnList.size() > 0) {    
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk delete, Schema must have a key at least."); 
        }
        
        tmpTableName_<%=cid%> = tableName_<%=cid%>;
        tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId() ;        
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Creating temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)".replaceAll("VARCHAR[(]\\d+?[)]","text"));
        stmtCreateTmp_<%=cid%>.close();
        <%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Create temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        
        <%if(standardConformingString) {
   		%>
   		java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   		cs_<%=cid%>.execute();
   		cs_<%=cid%>.close();
   		<%}%>        
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
			log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

    org.postgresql.copy.CopyManager bulk_stmt_<%=cid%> = new  org.postgresql.copy.CopyManager((org.postgresql.core.BaseConnection)conn_<%=cid %>);
  bulk_stmt_<%=cid%>.copyIn(bulkSQL_<%=cid%>, input_stream_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
		<%}%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
        
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Updating <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> from <%=manager.getLProtectedChar()%>"+tmpTableName_<%=cid%>+"<%=manager.getRProtectedChar()%>.");
		<%}%>
      Integer res_<%=cid%> =  stmtUpdateBulk_<%=cid%>.executeUpdate("<%=manager.getUpdateBulkSQL(columnList)%>");//natus
      globalMap.put("<%=cid %>_NB_LINE_UPDATED", res_<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_MODIFIED", res_<%=cid%>);//natus
      globalMap.put("<%=cid %>_QUERY", "<%=manager.getUpdateBulkSQL(columnList)%>");//natus
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Update has finished.");%>
        stmtUpdateBulk_<%=cid%>.close();
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Droping temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
		<%}%>
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Drop temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%>+ "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        <%
    }
} else if(("INSERT").equals(dataAction)||("INSERT_LAZY").equals(dataAction)) {
    %>
   <%if(standardConformingString) {
   %>
   	java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   	cs_<%=cid%>.execute();
   	cs_<%=cid%>.close();
   <%}%>
    //stmt.execute("SET client_encoding to 'UNICODE'");
	<%if(isLog4jEnabled){%>
		log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
		log.info("<%=cid%> - Inserting records in table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
	<%}%>
    org.postgresql.copy.CopyManager bulk_stmt_<%=cid%> = new  org.postgresql.copy.CopyManager((org.postgresql.core.BaseConnection)conn_<%=cid %>);
Long res_<%=cid%> =  bulk_stmt_<%=cid%>.copyIn(bulkSQL_<%=cid%>, input_stream_<%=cid%>);

globalMap.put("<%=cid %>_NB_LINE_INSERTED", res_<%=cid%> == null ? 0 : res_<%=cid%>.intValue());//natus
globalMap.put("<%=cid %>_NB_LINE_MODIFIED", res_<%=cid%> == null ? 0 : res_<%=cid%>.intValue());//natus
globalMap.put("<%=cid %>_QUERY", bulkSQL_<%=cid%>);//natus
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Insert records in table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
	<%
	}
}else if(("DELETE").equals(dataAction)) {
StringBuilder keyColumns = new StringBuilder("");
    if(columnList != null && columnList.size() > 0) {    
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
		    keyColumns.append(keyCount==0 ? "" : "+ \",\" +");
		    keyColumns.append( "\"\\\"" );
		    keyColumns.append( column.toString() );
		    keyColumns.append( "\\\"\"" );
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        
        tmpTableName_<%=cid%> = tableName_<%=cid%>;
        tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId() ;        
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Creating temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)".replaceAll("VARCHAR[(]\\d+?[)]","text"));
        stmtCreateTmp_<%=cid%>.close();
        <%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Create temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        
        <%if(standardConformingString) {
   		%>
   		java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   		cs_<%=cid%>.execute();
   		cs_<%=cid%>.close();
   		<%}%>        
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
			log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

    org.postgresql.copy.CopyManager bulk_stmt_<%=cid%> = new  org.postgresql.copy.CopyManager((org.postgresql.core.BaseConnection)conn_<%=cid %>);
  bulk_stmt_<%=cid%>.copyIn(bulkSQL_<%=cid%>, input_stream_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
		<%}%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
        
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Updating <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> from <%=manager.getLProtectedChar()%>"+tmpTableName_<%=cid%>+"<%=manager.getRProtectedChar()%>.");
		<%}%>
String bulkDeleteQuery<%=cid%> = "DELETE FROM \"" + tableName_<%=cid%> + "\" WHERE (" + <%=keyColumns.toString()%> + ") IN ( SELECT " +<%=keyColumns.toString()%>+ " FROM \"" + tmpTableName_<%=cid%> + "\")";
      Integer res_<%=cid%> =  stmtUpdateBulk_<%=cid%>.executeUpdate(bulkDeleteQuery<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_DELETED", res_<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_MODIFIED", res_<%=cid%>);//natus
      globalMap.put("<%=cid %>_QUERY", bulkDeleteQuery<%=cid%>);//natus
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Update has finished.");%>
        stmtUpdateBulk_<%=cid%>.close();
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Droping temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
		<%}%>
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Drop temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%>+ "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        <%
    }
}else if(("SELECT_JOIN").equals(dataAction)) {
StringBuilder keyColumns = new StringBuilder("");
    if(columnList != null && columnList.size() > 0) {    
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
		    keyColumns.append(keyCount==0 ? "" : "+ \",\" +");
		    keyColumns.append( "\"\\\"" );
		    keyColumns.append( column.toString() );
		    keyColumns.append( "\\\"\"" );
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        
        tmpTableName_<%=cid%> = tableName_<%=cid%>;
        tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId() ;        
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Creating temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)".replaceAll("VARCHAR[(]\\d+?[)]","text"));
        stmtCreateTmp_<%=cid%>.close();
        <%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Create temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        
        <%if(standardConformingString) {
   		%>
   		java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   		cs_<%=cid%>.execute();
   		cs_<%=cid%>.close();
   		<%}%>        
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
			log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

    org.postgresql.copy.CopyManager bulk_stmt_<%=cid%> = new  org.postgresql.copy.CopyManager((org.postgresql.core.BaseConnection)conn_<%=cid %>);
  bulk_stmt_<%=cid%>.copyIn(bulkSQL_<%=cid%>, input_stream_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
		<%}%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
        
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Updating <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> from <%=manager.getLProtectedChar()%>"+tmpTableName_<%=cid%>+"<%=manager.getRProtectedChar()%>.");
		<%}%>
String bulkInputSql<%=cid%> = "COPY (SELECT "+ <%=selectJoinField%> +" FROM \"" + tableName_<%=cid%> + "\" WHERE (" + <%=keyColumns.toString()%> + ") IN ( SELECT " +<%=keyColumns.toString()%>+ " FROM \"" + tmpTableName_<%=cid%> + "\")) TO STDOUT WITH DELIMITER AS ';' NULL AS '' CSV HEADER ENCODING 'UTF-8' QUOTE AS '\"' ESCAPE AS '\\' FORCE QUOTE *";
      org.postgresql.copy.PGCopyInputStream bulkInput_<%=cid%> = new  org.postgresql.copy.PGCopyInputStream((org.postgresql.core.BaseConnection)conn_<%=cid %>,bulkInputSql<%=cid%>);//natus
 java.io.FileOutputStream output<%=cid%> = new java.io.FileOutputStream(new java.io.File(<%=file_out%>));
Integer resultBulkInput<%=cid%> ;
while((resultBulkInput<%=cid%> = bulkInput_<%=cid%>.read())>0){
output<%=cid%>.write(resultBulkInput<%=cid%>);
output<%=cid%>.write( bulkInput_<%=cid%>.readFromCopy());
}
output<%=cid%>.close();
     globalMap.put("<%=cid %>_NB_LINE_SELECTED", ((Long)bulkInput_<%=cid%>.getHandledRowCount()).intValue());//natus
      globalMap.put("<%=cid %>_QUERY",bulkInputSql<%=cid%>);//natus
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Update has finished.");%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Droping temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
		<%}%>
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Drop temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%>+ "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        <%
    }
}else if(("DELSERT").equals(dataAction)) {
StringBuilder keyColumns = new StringBuilder("");
    if(columnList != null && columnList.size() > 0) {    
        int keyCount = 0;
        for(IMetadataColumn column : columnList) {
            if(column.isKey()) {
		    keyColumns.append(keyCount==0 ? "" : "+ \",\" +");
		    keyColumns.append( "\"\\\"" );
		    keyColumns.append( column.toString() );
		    keyColumns.append( "\\\"\"" );
                keyCount++;
            }
        }
        %>
        int keyCount_<%=cid%> = <%=keyCount%>;
        if(keyCount_<%=cid%> == 0) {
            throw new RuntimeException("For bulk update, Schema must have a key at least."); 
        }
        
        tmpTableName_<%=cid%> = tableName_<%=cid%>;
        tableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId() ;        
        java.sql.Statement stmtCreateTmp_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Creating temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

        stmtCreateTmp_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)".replaceAll("VARCHAR[(]\\d+?[)]","text"));
        stmtCreateTmp_<%=cid%>.close();
        <%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Create temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        
        <%if(standardConformingString) {
   		%>
   		java.sql.CallableStatement cs_<%=cid%> =conn_<%=cid %>.prepareCall("set standard_conforming_strings=on");
   		cs_<%=cid%>.execute();
   		cs_<%=cid%>.close();
   		<%}%>        
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - Bulk SQL:"+bulkSQL_<%=cid%>+".");
			log.info("<%=cid%> - Bulk inserting data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>." );
		<%}%>

    org.postgresql.copy.CopyManager bulk_stmt_<%=cid%> = new  org.postgresql.copy.CopyManager((org.postgresql.core.BaseConnection)conn_<%=cid %>);
  bulk_stmt_<%=cid%>.copyIn(bulkSQL_<%=cid%>, input_stream_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Bulk insert data into <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> has finished.");
		<%}%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        tmpTableName_<%=cid%> = "tmp_<%=cid%>" + "_" + pid + Thread.currentThread().getId();
        
        java.sql.Statement stmtUpdateBulk_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Updating <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> from <%=manager.getLProtectedChar()%>"+tmpTableName_<%=cid%>+"<%=manager.getRProtectedChar()%>.");
		<%}%>
String bulkDeleteQuery<%=cid%> = "DELETE FROM \"" + tableName_<%=cid%> + "\" WHERE (" + <%=keyColumns.toString()%> + ") IN ( SELECT " +<%=keyColumns.toString()%>+ " FROM \"" + tmpTableName_<%=cid%> + "\")";
      Integer res_<%=cid%> =  stmtUpdateBulk_<%=cid%>.executeUpdate(bulkDeleteQuery<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_DELETED", res_<%=cid%>);//natus
      globalMap.put("<%=cid %>_QUERY", bulkDeleteQuery<%=cid%>);//natus
        stmtUpdateBulk_<%=cid%>.close();

        java.sql.Statement stmtInsertBulk_<%=cid%> = conn_<%=cid%>.createStatement();
String bulkInsertQuery<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" VALUES ( SELECT * FROM \"" + tmpTableName_<%=cid%> + "\")";
      Integer resIns_<%=cid%> =  stmtInsertBulk_<%=cid%>.executeUpdate(bulkInsertQuery<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_INSERTED", resIns_<%=cid%>);//natus
      globalMap.put("<%=cid %>_NB_LINE_MODIFIED", resIns_<%=cid%>);//natus
      globalMap.put("<%=cid %>_QUERY", bulkInsertQuery<%=cid%>);//natus
        stmtInsertBulk_<%=cid%>.close();
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Update has finished.");%>
        tableName_<%=cid%> = tmpTableName_<%=cid%>;
        
        java.sql.Statement stmtTmpDrop_<%=cid%> = conn_<%=cid%>.createStatement();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Droping temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%>.");
		<%}%>
        stmtTmpDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>");
        stmtTmpDrop_<%=cid%>.close();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Drop temp table <%=manager.getLProtectedChar()%>" + tableName_<%=cid%>+ "<%=manager.getRProtectedChar()%> has succeeded.");
		<%}%>
        <%
    }
}
	if(!useExistingConnection) {
		log4jCodeGenerateUtil.close(node);
	}
%>
