<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
java.util.Iterator
		org.talend.core.model.process.ElementParameterParser
	"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
boolean skipSerial = ("true").equals(ElementParameterParser.getValue(node, "__SKIP_SERIAL__"));
List<IMetadataTable> metadatas = node.getMetadataList();
    
    String fileType = ElementParameterParser.getValue(node, "__FILETYPE__");
    
    String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
    
    String nullString = ElementParameterParser.getValue(node,"__NULLSTRING__");   
    
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			List<IMetadataColumn> columns = metadata.getListColumns();
if( skipSerial ){
for (Iterator<IMetadataColumn> iter = columns.listIterator(); iter.hasNext(); ) {
	IMetadataColumn col = iter.next();
	if (col.getType().equalsIgnoreCase("SERIAL")) {
		iter.remove();
	}
}
}
    			int sizeColumns = columns.size();
    			//for bug TDI-22555
%>
               	String[] row_<%=cid%>=new String[]{<%for(int j=0;j<sizeColumns;j++){if(j != 0) {%>, <%}%><%=nullString%><%}%>};
<%
    			for (int i = 0; i < sizeColumns; i++) {
    				IMetadataColumn column = columns.get(i);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
%>
                        	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
					}else {
%>   				
				       	if(<%=conn.getName() %>.<%=column.getLabel() %> != null){
<%                  
                    		if(javaType == JavaTypesManager.STRING ){
%>
                            	row_<%=cid%>[<%=i%>] = <%=conn.getName() %>.<%=column.getLabel() %>;
<%
							}else if(javaType == JavaTypesManager.DATE && pattern != null){
%>
    	                    	row_<%=cid%>[<%=i%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
<%
        					}else if(javaType == JavaTypesManager.BYTE_ARRAY){
%>
            	            	row_<%=cid%>[<%=i%>] = java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap(<%=conn.getName() %>.<%=column.getLabel() %>)).toString();
<%
							}else{
%>
    	                    	row_<%=cid%>[<%=i%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
<%
        					}
%>
  						}
<%
					}
				}
    			if("TXTFILE".equals(fileType)){
%>
					for (int i_<%=cid %> = 0; i_<%=cid %> < row_<%=cid %>.length; i_<%=cid %>++) {
	               		String temp_<%=cid %> = row_<%=cid %>[i_<%=cid %>];
	               		
	    		        if(i_<%=cid %> != 0) {
    	    	       		out<%=cid %>.write(OUT_DELIM_<%=cid %>.toString());
        	        	}
        	        	if(!<%=nullString %>.equals(temp_<%=cid %>)){
        	        	  temp_<%=cid %> = temp_<%=cid %>.replaceAll("\\\\","\\\\\\\\");
        	        	}
		           		out<%=cid %>.write(temp_<%=cid %>);
    		        }
<%
    			}else if("CSVFILE".equals(fileType)){
%>
					for (int i_<%=cid %> = 0; i_<%=cid %> < row_<%=cid %>.length; i_<%=cid %>++) {
						if(i_<%=cid %> != 0) {
                        	out<%=cid%>.write(OUT_DELIM_<%=cid %>.toString());
                        }
                		String temp_<%=cid %> = row_<%=cid %>[i_<%=cid %>];
                        if(!<%=nullString%>.equals(temp_<%=cid %>)) {
                            if (escape_mode_<%=cid %> == 0 ) { // double quotes
                                temp_<%=cid %> = temp_<%=cid %>.replace("" + textEnclosure_<%=cid %>, "" + textEnclosure_<%=cid %> + textEnclosure_<%=cid %>);
                            }else{
                                temp_<%=cid %> = temp_<%=cid %>.replace("\\", "\\\\");
                                temp_<%=cid %> = temp_<%=cid %>.replace("" + textEnclosure_<%=cid %>, "\\" + textEnclosure_<%=cid %>);
                            }
                            out<%=cid%>.append(textEnclosure_<%=cid %>);
                        	out<%=cid%>.write(temp_<%=cid %>);
                        	out<%=cid%>.append(textEnclosure_<%=cid %>);
                        }else{
                            out<%=cid%>.write(temp_<%=cid %>);
                        }
                	}
<%
				}
%>
    			out<%=cid %>.write(OUT_DELIM_ROWSEP_<%=cid %>);
    			nb_line_<%=cid %>++;
                <%if(isLog4jEnabled){%>
                    log.debug("<%=cid%> - Writing the record " + nb_line_<%=cid%> + ".");
                <%}%>
    <%
    		}
    	}
    }
}
%>
